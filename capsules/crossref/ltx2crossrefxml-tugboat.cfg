# $Id$
# Configuration file for ltx2crossrefxml.pl (from crossrefware).

# Name of the depositor
$depositorName='TUGboat production';

# Email
$depositorEmail='doi-tugboat@tug.org';

# Organization
$registrant='TeX Users Group';

# The rest is self-evident
$fullTitle="TUGboat";
$issn="0896-3207";

# TUGboat has no coden or abbreviated title.

# TUGboat conversions for plain text. Unicode should become
# \x{....} as a string, not a character.
#
sub LaTeX_ToUnicode_convert_hook {
  my ($string,$options) = @_;
  
  my $endcw = $LaTeX::ToUnicode::endcw;
  die "no endcw regexp in LaTeX::ToUnicode??" if ! $endcw;

  # some raw TeX commands we end up using.
  $string =~ s/\\[hv]fill?$endcw//g;
  $string =~ s/\\[hv]filneg$endcw//g;
  $string =~ s/\\[hv]ss$endcw//g;

  $string =~ s/\\(app|cls|field|pkg|sty)$endcw//g; # talbot

  # these take arguments. Bare braces {...} are removed after all the
  # conversions, so we only need remove the control sequence.
  $string =~ s/\\acro$endcw//g;
  $string =~ s/\\booktitle$endcw//g;
  $string =~ s/\\rlap$endcw//g;
  
  # arbitrary Unicode character; this command doesn't exist in (La)TeX
  # TUGboat, but useful for translating, e.g., tb130knuth-tuneup.bbl.
  $string =~ s,\\tbunichar$endcw\{(.*?)\},\\x{$1}},g;

  # use entity here because we want to be able to search for literal \
  # to find untranslated TeX source:
  $string =~ s,\\cs$endcw\{(.*?)\},<tt>&#x5c;$1</tt>,g;

  # no arguments
  $string =~ s/\\API$endcw/API/g;
  $string =~ s/\\ConTeXt$endcw/ConTeXt/g;
  $string =~ s/\\CTAN$endcw/CTAN/g;
  $string =~ s/\\Dash$endcw/\\x{2014}/g; # em dash
  $string =~ s/\\GNU$endcw/GNU/g;
  $string =~ s/\\ISBN$endcw/ISBN/g;
  $string =~ s/\\LUAMETATEX$endcw/LuaMetaTeX/g;
  $string =~ s/\\MFB$endcw/The Metafontbook/g;
  $string =~ s/\\MPLIB$endcw/MPLIB/g;
  $string =~ s/\\OPmac$endcw/OPmac/g;
  $string =~ s/\\OpTeX$endcw/OpTeX/g;
  $string =~ s/\\PDF$endcw/PDF/g;
  $string =~ s/\\TB$endcw/The TeXbook/g;
  $string =~ s/\\TEX$endcw/TeX/g; # for ConTeXt-ish article
  $string =~ s/\\TUB$endcw/TUGboat/g;
  #
  $string =~ s/\\break$endcw/ /g;
  $string =~ s/\\dash$endcw/\\x{2013}/g; # en dash
  $string =~ s/\\epTeX$endcw/epTeX/g;
  $string =~ s/\\newline$endcw/ /g;
  $string =~ s/\\pTeX$endcw/pTeX/g;
  $string =~ s/\\pdftex$endcw/pdfTeX/g;
  $string =~ s/\\smallbreak$endcw/ /g;
  $string =~ s/\\tbUTF$endcw/UTF/g;
  $string =~ s/\\tug$endcw/TUG/g;
  $string =~ s/\\upTeX$endcw/upTeX/g;
  
  $string =~ s,\\(begin|end)$endcw\{abstract\}\s*,,g;
  # Output for our url abbreviations depends on whether we're generating
  # plain text or HTML.
  if ($options->{html}) {
      # HTML.
      # \tbhurl{URLBASE} -> <a href="http://URLBASE">URLBASE</a>
      $string =~ s,\\tbhurl$endcw\{([^}]*)\}
               ,<a href="http://$1">$1</a>,gx;
      #
      # \tbsurl{URLBASE} -> <a href="https://URLBASE">URLBASE</a>
      $string =~ s,\\tbsurl$endcw\{([^}]*)\}
                  ,<a href="https://$1">$1</a>,gx;
  } else {
      # for plain text, we can just prepend the protocol://.
      $string =~ s,\\tbhurl$endcw,http://,g;
      $string =~ s,\\tbsurl$endcw,https://,g;
  }

  # things we throw away.
  $string =~ s/\\gobble\s*\\[a-zA-Z]+//g; # \gobble\cs
  $string =~ s/\\gobble\s*\\[^a-zA-Z]//g; # \gobble\.
  $string =~ s/\\gobble\s*\{[^}]*\}//g;   # \gobble{grp}
  $string =~ s/\\gobble$endcw[^\\]//g;    # \gobble t
  #
  $string =~ s/\\noopsort\s*\{[^}]*\}//g;   # \noopsort{grp}
  
  return $string;
}

# The last line must be 1;
1;
