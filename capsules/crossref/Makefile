# $Id$
# Public domain.
# See the README here for the general story on our doi support.

# We want to use the development version of ltx2crossrefxml, e.g.,
# a symlink to /home/.../crossrefware/ltx2crossrefxml.pl
# in a crossrefware checkout. It's not unlikely that any given issue of
# TUB will require updates to crossrefware or bibtexperllibs.
ltx2crossrefxml = ./ltx2crossrefxml
#
tub_cfg = ltx2crossrefxml-tugboat.cfg

# We will read all the rpi files generated by captub,
# which we run one issue at a time.
rpi_input = dir2.process/*.rpi
#
# The bbl files for those articles.
bbl_input = dir2.process/*.bbl
#
# The output file we will eventually upload.
xml_output = dir2.process/issue.xml

# the "issue" target is used by cr-do-issue.
$(xml_output) issue: $(rpi_input) $(tub_cfg) force
	$(ltx2crossrefxml) -c $(tub_cfg) $(rpi_input) --rpi-is-xml -o $(xml_output) \
	  || { rm -f $(xml_output); exit 1; }
	xmllint --noout $(xml_output) # basic syntax check
#sed '1,/<titles>/d' $(xml_output) # omit top boilerplate
# check basics:
#egrep '(name|organization|title)>' $(xml_output)
# see citation text:
#grep -A1 '<citation' $(xml_output) | grep -v '^--$$' | cut -c 6-
	! egrep '\\|--' $(xml_output) # TeX left untranslated?

# https://www.crossref.org/schemas/crossref4.4.2.xsd
# https://www.crossref.org/schemas/common4.4.2.xsd
xsd = http://www.crossref.org/schema/deposit/crossref4.4.2.xsd
# https://stackoverflow.com/questions/17002324/xmllint-validate-an-xml-file-against-two-xsd-schemas-envelope-payload
# https://www.biglist.com/lists/lists.mulberrytech.com/jats-list/archives/201310/msg00018.html
validate v: $(xml_output)
	xmllint --noout --schema $(xsd) $<

force:

#  Uploading.
# Crossref's upload tool seems to work fine. It comes from here:
# https://www.crossref.org/education/member-setup/direct-deposit-xml/https-post
# 
cut = java -jar crossref-upload-tool.jar
crossread-upload-tool-help cut-help:
	$(cut) --help
#
# Upload to production or test server:
crossref_real_host = doi.crossref.org
crossref_test_host = test.crossref.org
#
# Of course the username and password are not committed to version control.
crossref_user = --user `cat crossref-user.txt`
#
# Don't do anything but run locally (which is not much):
chicken = #--dry-run
#
upload-test:
	$(cut) $(chicken) $(crossref_user) \
	  --host $(crossref_test_host) \
	   --metadata $(xml_output)
#
# It costs money to deposit a doi. Don't do it until you're sure.
upload-real:
	echo "checkme!"; false $(cut) $(chicken) $(crossref_user) \
	  --host $(crossref_real_host) \
	  --metadata $(xml_output)
#
# If syntax is ok, get back a SUCCESS html doc.
# Then, log in to test.crossref.org resp. doi.crossref.org
# -> Submission administration
# -> Search (all fields can be left blank)
# -> can see status / get errors; should also get emailed back.
# 
# It says area=L(ive), but that's misleading; this is the test area.
#
# test result mail From: CrossRef Query System <awsbounce@crossref.org>
# real result mail From: Crossref <admin@crossref.org>
