# $Id$
# See the README here for the general story on our doi support.

# We require the development version of ltx2crossrefxml.
ltx2crossrefxml = ltx2crossrefxml

tub_cfg = ltx2crossrefxml-tugboat.cfg

# We will read all the rpi files generated by captub,
# which we run one issue at a time.
rpi_input = process/*.rpi
#
# And the output file we will eventually upload.
xml_output = process/output.xml

$(xml_output): $(rpi_input) $(tub_cfg) force
	$(ltx2crossrefxml) -c $(tub_cfg) $(rpi_input) --input-is-xml -o $@ \
	|| { rm -f $@; exit 1; }
	#sed '1,/<titles>/d' $@ # omit top boilerplate
	egrep '(name|title)>' $@

force:

# Crossref's upload tool seems to work fine. It comes from here:
# https://www.crossref.org/education/member-setup/direct-deposit-xml/https-post
# 
cut = java -jar crossref-upload-tool.jar
crossread-upload-tool-help cut-help:
	$(cut) --help
#
# Upload to production or test server:
crossref_real_host = doi.crossref.org
crossref_test_host = test.crossref.org
#
# Of course the username and password are not committed to version control.
crossref_user = --user `cat crossref-user.txt`
#
# Don't do anything but run locally (which is not much):
chicken = #--dry-run
#
upload-test:
	$(cut) $(crossref_user) \
	  --host $(crossref_test_host) --metadata \
	  $(xml_output) $(chicken)
#
# It costs money to deposit a doi. Don't do it until you're sure.
upload-real:
	echo "checkme!"; false $(cut) $(crossref_user) \
	  --host $(crossref_real_host) --metadata \
	  $(xml_output) $(chicken)
#
# If syntax is ok, get back a SUCCESS html doc.
# Then, log in to test.crossref.org resp. doi.crossref.org
# -> Submission administration
# -> Search (all fields can be left blank)
# -> can see status / get errors; should also get emailed back.
# 
# It says area=L(ive), but that's misleading; this is the test area.
