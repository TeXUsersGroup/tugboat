# $Id$
# Public domain.
# 
# Series of Perl substitutions, one per line, to be applied in sequence
# and repeated as long as there is any change. The LHS and RHS are
# separated by ||, but other than that, these are Perl expressions, not
# literal strings, so we can use backreferences. /g is always applied.
# 
# Furthermore, /ee is applied, so the rhs must be evalable. Meaning that
# when we concatenate we have to make it a Perl string.
# 
# Assume the lists-translations have already been applied.

\\acro\{(.*?)\}||$1
\\code\{(.*?)\}||"<tt>$1</tt>"
\\cs\{(.*?)\}||"<tt>\\$1</tt>"
\\emph\{(.*?)\}||"<i>$1</i>"
\\pkg\{(.*?)\}||$1
\\pkgname\{(.*?)\}||$1
\\url\{(.*?)\}||"<tt>$1</tt>"

# superscript
\\sp\{(.*?)\}||"<sup><font size=1>$1</font></sup>"

# \ss at end of string; can't easily do in translations since there is
# also \ssf. cleaner to do it here.
\\ss$||"&szlig;"

# fonts; do after accents so most braces have been removed.
\{\\it\s*(.*?)\}||"<i>$1</i>"
\\textit\{\s*(.*?)\}||"<i>$1</i>"
#
\{\\sl\s*(.*?)\}||"<i>$1</i>"
\\textsl\{\s*(.*?)\}||"<i>$1</i>"
#
\{\\bf\s*(.*?)\}||"<b>$1</b>"
#
\{\\ssf\s*(.*?)\}||$1
\{\\sf\s*(.*?)\}||$1
\\textsf\{(.*?)\}||$1
#
\\texttt\{(.*?)\}||"<tt>$1</tt>"
\{\\tt\\bs (.*?)\}||"<tt>\\$1</tt>"
\{\\tt\s*(.*?)\}||"<tt>$1</tt>"

# elide bare braces. do last since braces are part of matching above.
\{(.*?)\}||$1
