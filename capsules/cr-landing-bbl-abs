#!/usr/bin/env perl
# $Id$
# Replace bibliography and abstract placeholders in the landing pages
# with their actual text.

use strict; use warnings;

my $ltx2unitxt = "ltx2unitxt -c crossref/ltx2crossrefxml-tugboat.cfg"
                 . "  --html --entities";

exit (&main ());

sub main {
  if (@ARGV != 2) {
    warn <<END_USAGE; # just a hint as to what's happening.
Usage: $0 [CROSSREF.xml] [CROSSREF_WORKING_DIR]

In CROSSREF_WORKING_DIR/*.html (Crossref landing) files,
1) replace bibliography placeholders with the actual bbl text
   taken from CROSSREF.xml, and also
2) replace abstract placeholds with the abstract texts taken from
   CROSSREF_WORKING_DIR/ARTICLE.abs.
END_USAGE
    exit ($ARGV[0] ne "--help");
  }
  
  my %citations = &read_crossref_xml ($ARGV[0]);
  my $bbl_cnt = &update_landing_bbl ($ARGV[1], %citations);
  my $abs_cnt = &update_landing_abs ($ARGV[1]);
  
  print "$0: inserted $bbl_cnt bbl(s), $abs_cnt abstract(s): $ARGV[1]\n";
  # should always have both citations and abstracts in a whole journal issue.
  exit ($bbl_cnt == 0 || $abs_cnt == 0);
}


# We're not going to actually parse the xml (yuck). Instead, assume the
# reasonable output format which we generate.
# 
sub read_crossref_xml {
  my ($xml_fname) = @_;
  my %citations;
  
  open (my $xml_fh, $xml_fname) || die "$0: open($xml_fname) failed: $!\n";
  
  my $in_article = 0;
  my $doi_base;
  while (<$xml_fh>) {
    next unless /<journal_article/ || $in_article;
    
    if (/<journal_article/) {
      $in_article = 1;
      next;
    }
    
    if ($in_article) {
      if (/<doi>/) {
        # input: <doi>10.47397/tb/41-3/tb129flynn-tex3</doi>
        # we want the "basename" part of the doi.
        ($doi_base) = m!<doi>.*/(.*)</doi>!;
        debug ("got $doi_base from $_");
        
      } elsif (/<citation /) {
        die "citation before doi, should not happen: $_" if ! $doi_base;
        #
        # input: <citation key="gentle-1"><unstructured_citation>
        # input:   M. Doob. A Gentle Introduction ...
        # We don't need anything from the <citation> line, just the
        # second line of plain text bbl info.
        $_ = <$xml_fh>;
        chomp;
        debug (" got citation: $_\n");
        push (@{$citations{$doi_base}}, $_);
        
      } elsif (m!</journal_article>!) {
        debug (" end article.\n");
        $in_article = 0;
      }
    }
  }
  
  die "xml ended in middle of journal_article, should not happen: $xml_fname"
    if $in_article;
  close ($xml_fh) || warn "$0: close($xml_fname) failed: $!\n";
  
  return %citations;
}


# Update the LANDING_DIR/ARTICLE.html files, where each ARTICLE is a key
# in the CITATIONS hash. Replace the bbl placeholder with the text that
# is the value for that key.
# 
sub update_landing_bbl {
  my ($landing_dir,%citations) = @_;
  my $updated = 0;
  
  for my $article (sort keys %citations) { # sort just for debugging ease
    my $landing_fname = "$landing_dir/$article.html";
    open (my $landing_fh, $landing_fname)
    || die "open($landing_fname) failed: $!";
    
    my $temp_fname = "$landing_dir/$article.temp";
    open (my $temp_fh, ">$temp_fname") || die "open($temp_fname) failed: $!";

    while (<$landing_fh>) {
      if (/REPLACE-WITH-BIBLIOGRAPHY/) {
        print $temp_fh "<p><b>References</b>:</p>\n<ol class=\"tugbbl\">\n";
        for my $cite (@{$citations{$article}}) {
          $cite =~ s/^\s+//;
          $cite =~ s/\s+$//;
          
          # build a new citation string, making urls into links.
          my $newcite = "";
          for my $word (split (" ", $cite)) {
            #warn "checking $word\n";

            # try to detect http(s) urls, with or without a protocol,
            # possibly followed by a period or comma.
            my ($prot,$urlbase) = "";
            
            # protocol is specified.
            if ($word =~ m!^https?://!) {
              ($prot,$urlbase) = ($word =~ m!^(https?)://(\S+)!);
              #warn " got explicit $prot, urlbase $urlbase\n";

            # no protocol; domain name just alphanumeric and -,
            #   must be at least two chars. (Don't worry about x.org.)
            # And, second part (the "bar" in "foo.bar") must have at
            #   least one letter, not just numbers and dashes, because
            #   that is a bib reference like "vol.1" or "pp.1-2".
            # But even that is not enough, since the reference might
            #   have letters, like "report no.1-A". So eliminate
            #   the common bib abbreviations.
            # Also, another special case, foo.sty, etc., is not a url.
            #
            # Maybe we should force spaces after such bib abbrevs,
            #   but that doesn't seem ideal either.
            } elsif ($word =~ m!^([a-z0-9-]{2,})\.([a-z0-9-]{2,})[.,]?!i
                     && $2 =~ /a-z/i
                     && $1 !~ /^(no?|v(ol)?|pp?|iss)$/i
                     && $2 !~ /^(sty|cls)$/i) {
              $prot = "https";
              $urlbase = $word;
              #warn " got implicit urlbase $urlbase\n";
            }
            
            $newcite .= " " if $newcite; # single spaces between words
            if ($prot) {
              #warn " got prot $prot, urlbase $urlbase\n";
              # just drop trailing period or comma, more confusion than help
              $urlbase =~ s/[.,]$//;
              my $url = "$prot://$urlbase";
              $newcite .=  qq!<a href="$url">$urlbase</a>!;
            } else {
              $newcite .= $word;
            }
          }
          print $temp_fh "<li class=\"tugbbl\">$newcite</li>\n";
        }
        print $temp_fh "</ol>\n";
      } else {
        print $temp_fh $_;
      }
    }
    close ($landing_fh) || warn "close($landing_fname) failed: $!";
    close ($temp_fh) || warn "close($temp_fname) failed: $!";
    
    &system_mv ($temp_fname, $landing_fname);
    $updated++;
    delete $citations{$article};
  }

  die "$0: citations not incorporated into landing pages:",
       join (" ", keys %citations), "\n"
    if keys %citations > 0;

  return $updated;
}


# Update the LANDING_DIR/ARTICLE.html files with the abstracts from
# LANDING_DIR/ARTICLE.abs. The .abs files are in TeX. We convert them on
# the fly with the same LaTeX::ToUnicode code used by ltx2crossrefxml.pl.
# 
# Although the crossref schema supports including abstracts, it does not
# seem worth the trouble. Conversion of this free form text is error-prone,
# and we wouldn't want to upload problematic text and then have to fix
# it later. Easier just to keep the abstracts on the landing pages,
# which we can merely regenerate locally.
# 
sub update_landing_abs {
  my ($landing_dir) = @_;
  my $updated = 0;

  for my $abs (glob ("$landing_dir/*.abs")) {
    (my $landing_fname = $abs) =~ s/\.abs$/.html/;
    open (my $landing_fh, $landing_fname)
    || die "open($landing_fname) failed: $!";
    
    (my $article = $abs) =~ s,.*/,,;
    my $temp_fname = "$landing_dir/$article.temp";
    open (my $temp_fh, ">$temp_fname") || die "open($temp_fname) failed: $!";

    while (<$landing_fh>) {
      if (/REPLACE-WITH-ABSTRACT/) {
        print $temp_fh "<p><b>Abstract</b>:\n";
        
        # convert TeX abstract to text, and insert paragraph markers.
        my $out = `$ltx2unitxt $abs`;
        $out =~ s/^\s+//; # removing leading whitespace, especially newlines
        $out =~ s/\s+$//; # might as well do trailing too.

        # blank lines separate paragraphs; assume no stray other whitespace
        my @out = split (/\n\n+/, $out);
        my $out_with_p = join ("</p>\n<p>", @out);  # html paragraph
        print $temp_fh $out_with_p;
        print $temp_fh "</p>\n"; # close open <p> from head
        die "$ltx2unitxt failed" if $?;
      } else {
        print $temp_fh $_;
      }
    }
    close ($landing_fh) || warn "close($landing_fname) failed: $!";
    close ($temp_fh) || warn "close($temp_fname) failed: $!";

    &system_mv ($temp_fname, $landing_fname);
    $updated++;
  }
  return $updated;
}


# just call mv to move the temp file back to real.
# doesn't matter that it's not atomic, etc.
#
sub system_mv {
  my $cmd = "mv @_";
  my $ret = system ($cmd);
  die "system($cmd) failed, status $ret: $!\n" if $ret;
}

sub debug {
  #print @_;
}
