#!/usr/bin/env perl
# $Id$
# Check consistency of spliced items, as explained below.
# Assume grep supports -l.
# We run this from the top-level issue Makefile.
# 
# Splicing is unfortunately a complicated and error-prone process, with
# several things having to be in sync to avoid lost material. That's
# what this script is intended to check. The checks themselves are not
# the easiest to figure out, but we can only try.

use strict; use warnings; $| = 1;

exit (&main ());

sub main {
  if (@ARGV == 1) {
    chdir ($ARGV[0]) || die "chdir($ARGV[0]) failed: $!";
  } elsif (@ARGV) {
    die "$0: expected single [issue] directory argument, not: @ARGV\n";
  }
  
  my @nocadmus = &find_nocadmus ();
  my @firstpageincr = &find_firstpageincr ();
  my ($multisplice1,$multisplice2) = &find_multisplice ();
  my %singlesplice = &find_singlesplice ();
  #
  return &check_all_splices (\@nocadmus, \@firstpageincr,
                             $multisplice1, $multisplice2,
                             \%singlesplice);
}


# Return all .tex, .ltx, etc., but omit .aux. We could check
# tugboat.dates to see which are active, but generally there are no
# stray items. (And there are separate checks for consistency of
# tugboat.dates and the covers.)
# 
sub find_source_files {
  my @source_files = glob ("*/tb[0-9]*.[!a]?x");  # !a to skip .aux
  #warn "source files: @source_files\n";
  return @source_files;
}


# Makefiles that say nocadmus:. Don't worry about leading whitespace.
# Each and every one of these items should be accounted for in some way.
# 
sub find_nocadmus {
  my @matches = `grep -l ^nocadmus: */Makefile`;
  #warn "nocadmus matches: @matches\n";
  
  my @items = sort map { s,/Makefile\s*,,; $_; } @matches;
  info ("nocadmus items: @items\n");
  
  return @items;
}


# Items that specify a \firstpageincr. Don't worry about leading whitespace.
# Each of these items should be in nocadmus, and spliced in some way.
# 
sub find_firstpageincr {
  my @source_files = &find_source_files ();

  my $f = '^[\]def[\]firstpageincr{';
  my @matches = `grep -l '$f' @source_files`;
  #warn "firstpageincr matches: @matches\n";
  
  my @items = sort map { s,/.*\s*,,; $_; } @matches;
  info ("firstpageincr items: @items\n");
  
  return @items;
}


# Items from splice/Makefile, generally for splices where both items are
# more than one page. Return first and second splices separately, since
# the second splices should have \firstpageincr and the first splices
# not, which we check.
# 
# We don't handle three-way (or more) splices yet (until it comes up again).
# 
sub find_multisplice {
  my $splmkname = "splice/Makefile";
  my $splmk;
  if (! open ($splmk, $splmkname)) {
    print "$0: no splice/Makefile.\n";
    my @items = ();
    return (\@items, \@items);
  }
  
  my @items; # use items[1], items[2] as array refs.
  while (<$splmk>) {
    next unless /^p._paper(\d) = (.*)$/;
    die "*** must implement three-way splice" if /^p._paper[3-9]/;
    push (@{$items[$1]}, $2);
  }
  close ($splmk) || die "close($splmkname) failed: $!";
  info ("multisplice items1: @{$items[1]}\n");
  info ("multisplice items2: @{$items[2]}\n");
  
  return ($items[1],$items[2]);
}


# Items from the source files that include another item directly.  We do
# this when the included item is a single column, so no need for the
# multi-page splice.
# 
# We return a hash where the keys are the items being included, and the
# values are the item where the include happens. For example,
# tb137gratzer-smile includes tb137zprav, so one element in the return
# hash is ("zprav" => "gratzer-smile").
# 
# This is more complex than the others since we want to recognize
# various "end of document" commands and stop reading. It's too
# aggravating to have to comment out unused blocks after eod.
# 
sub find_singlesplice {
  my @source_files = &find_source_files ();
  my %items;
  
  for my $srcname (@source_files) {
    warn "source file $srcname\n";
    open (my $src, $srcname) || die "open($srcname) failed: $!";
    while (<$src>) {
      # We don't worry about the end-of-document commands inside verbatim,
      # or other games with catcodes, etc.
      next if /^\s*%/;	      # comment
      last if /^\\end\{document\}/; # latex except tb139beet has it in verb
      last if /\\end$/;	      # plain
      last if /\\endarticle/; # tugboat
      
      # Now try to recognize including the pdf of another item. Starting
      # in 45:1, we invented \tubspliceleft and ...right commands to do
      # the splice explicitly. So that's an easy first case. As in:
      # \tubspliceright{beebe-wirth}
      # 
      my $dirname;
      if (m,\\tubsplice(left|right)\{([^}]*)\},) { # explicit splice cmd
        $dirname = $2;

        # Otherwise, we often include a pdf directly, The surrounding
        # TeX code is arbitrary, but there are no(?) other cases where
        # the source says "../something/tbsomething.pdf" so that's what
        # we match.
        # 
        # Examples:
        # \def\inclfile{../zprav/tb137zprav-crop.pdf}
        # \rlap{\includegraphics{../prod/tb132prod-crop.pdf}}%
        # \immediate\pdfximage width2.08\hsize {../instmem/instmem-crop.pdf}
        # \tubsplice{../beebe-wirth/tb139beebe-width.pdf}
      } elsif (m,\.\./([^/]+)/(tb\d\d\d)?\1(-crop)?\.pdf,) { # inclusion
        $dirname = $1;
      } else {
        next;
      }
      
      (my $srcitem = $srcname) =~ s,.*/(tb\d\d\d)?(.*)\...x$,$2,;
      $items{$dirname} = $srcitem;
      warn " found $dirname spliced into $srcitem\n";
    }
    close ($src) || die "close($srcname) failed: $!";    
  }

  info_hash ("singlesplice items", %items);
  return %items;
}


# See comments inline for what we're checking.
# 
sub check_all_splices {
  my ($nocadmus,$firstpageincr,$multisplice1,$multisplice2,$singlesplice) = @_;

  my (%nocadmus);
  @nocadmus{@$nocadmus} = ();
  #
  my @firstpageincr = @$firstpageincr;
  #
  my (%multisplice1);
  @multisplice1{@$multisplice1} = ();
  #
  my (%multisplice2);
  @multisplice2{@$multisplice2} = ();
  #
  my %singlesplice = %$singlesplice;
  my %singlesplice_reverse = reverse %singlesplice;
  #info_hash ("singlesplice reverse", %singlesplice_reverse);
  info ("\n");

  # Each item in firstpageincr should definitely be spliced. Usually it
  # will be in nocadmus, but when a longer item includes the one-page at
  # the front (e.g., tb137gratzer so includes zprav), it won't. So then it
  # should be a singlesplice target value (not key).
  # 
  # Except for that same "front splice" case, it should also be in
  # either multisplice2 (the second item), or singlesplice.
  # 
  for my $fp (@firstpageincr) {
    if (exists $nocadmus{$fp}) {
      &info ("found firstpageincr $fp in nocadmus, ok\n");
    } elsif (exists $singlesplice_reverse{$fp}) {
      &info ("found firstpageincr $fp in singlesplice_reverse, ok\n");
    } else {
      die "firstpageincr $fp not in nocadmus (@$nocadmus)";
    }
    
    if (exists $multisplice2{$fp}) {
      &info ("found firstpageincr $fp in multisplice2, ok\n");    
    } elsif (exists $singlesplice{$fp}) {
      &info ("found firstpageincr $fp in singlesplice, ok\n");
    } elsif (exists $singlesplice_reverse{$fp}) {
      ; # reported above
    } else {
      die "firstpageincr $fp not in multisplice2 or singlesplice";
    }
  }
  
  # everything in multisplice1 and multisplice2 and singlesplice should
  # be in nocadmus, and nothing should be left over.
  for my $ms (sort(keys %multisplice1, keys %multisplice2,
                   keys %singlesplice)) {
    if (exists $nocadmus{$ms}) {
      delete $nocadmus{$ms};
      &info ("found splice $ms in nocadmus, ok\n");
    } elsif ($ms eq "covers") {
      &info ("covers is special, ok not to be in nocadmus\n");
    } else {
      die "splice $ms not in nocadmus (@$nocadmus)";
    }
  }
  
  die "nocadmus items remain: ", join (" ", keys %nocadmus)
    if (keys %nocadmus);
  return 0;
}


sub info { print @_; }
#
sub info_hash {
  my ($label) = shift;
  my (%hash) = (ref $_[0] && $_[0] =~ /.*HASH.*/) ? %{$_[0]} : @_;

  my $str = "$label: {";
  my @items = ();
  for my $key (sort keys %hash) {
    my $val = $hash{$key};
    $key =~ s/\n/\\n/g;
    $val =~ s/\n/\\n/g;
    push (@items, "$key:$val");
  }
  $str .= join (",", @items);
  $str .= "}";

  print "$str\n";
}
